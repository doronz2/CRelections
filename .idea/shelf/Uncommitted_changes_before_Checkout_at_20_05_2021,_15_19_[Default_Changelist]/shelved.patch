Index: src/citivas/test_voter.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#[cfg(test)]\npub mod test_voter {\n    use crate::{SupportedGroups, ElGamalPP, ElGamal, ElGamalPublicKey};\n    use crate::citivas::encryption_schemes::\n    {encoding_quadratic_residue};\n    use crate::citivas::supervisor::SystemParameters;\n    use crate::citivas::voter::Voter;\n    use crate::citivas::registrar::Registrar;\n    use crate::citivas::zkproofs::DvrpPublicInput;\n    use crate::BigInt;\n    use crate::citivas::entity::Entity;\n    use curv::arithmetic::traits::Samplable;\n\n\n    #[test]\n    pub fn validate_credential_shares() {\n        let group_id = SupportedGroups::FFDHE4096;\n        let pp = ElGamalPP::generate_from_rfc7919(group_id);\n        let voter_number = 1;\n        let params = &SystemParameters::create_supervisor(&pp);\n        let pk =  ElGamalPublicKey {\n            pp,\n            h: BigInt::from(4)\n        };\n        let voter = Voter::create(voter_number, &params, &pk);\n        let registrar = Registrar::create(0, params.clone(),  pk.clone());\n        let share = registrar.create_credential_share();\n        let dvrp_input = DvrpPublicInput::create_input(&voter.designation_key_pair.pk.h, registrar.get_pk(), &share.S_i_tag, &share.S_i);\n        let cred_share_output = registrar.publish_credential_with_proof(&share, dvrp_input);\n        assert!(voter.verify_credentials(&cred_share_output, &share.S_i));\n    }\n\n    #[test]\n    pub fn test_credential_shares_construction() {\n        let group_id = SupportedGroups::FFDHE4096;\n        let pp = ElGamalPP::generate_from_rfc7919(group_id);\n        let voter_number = 1;\n        let params = SystemParameters::create_supervisor(&pp);\n        let pk =  ElGamalPublicKey {\n            pp,\n            h: BigInt::from(4)\n        };\n        let mut voter = Voter::create(voter_number, &params, &pk);\n        let registrar_1 = Registrar::create(0, params.clone(), pk.clone());\n        let registrar_2 = Registrar::create(0, params.clone(),  pk.clone());\n        let registrar_3 = Registrar::create(0, params.clone(),  pk.clone());\n\n        let share_1 = registrar_1.create_credential_share();\n        let share_2 = registrar_2.create_credential_share();\n        let share_3 = registrar_3.create_credential_share();\n\n        let dvrp_input_1 = DvrpPublicInput::create_input(&voter.designation_key_pair.pk.h, registrar_1.get_pk(), &share_1.S_i_tag, &share_1.S_i);\n        let dvrp_input_2 = DvrpPublicInput::create_input(&voter.designation_key_pair.pk.h, registrar_2.get_pk(), &share_2.S_i_tag, &share_2.S_i);\n        let dvrp_input_3 = DvrpPublicInput::create_input(&voter.designation_key_pair.pk.h, registrar_3.get_pk(), &share_3.S_i_tag, &share_3.S_i);\n\n        let cred_share_output_1 = registrar_1.publish_credential_with_proof(&share_1, dvrp_input_1);\n        let cred_share_output_2 = registrar_2.publish_credential_with_proof(&share_2, dvrp_input_2);\n        let cred_share_output_3 = registrar_3.publish_credential_with_proof(&share_3, dvrp_input_3);\n        //this bad share of registrar 3 should not be counted as it's dvrp proof does not pass verification\n        let bad_encryption = ElGamal::encrypt(&BigInt::from(1234),&voter.designation_key_pair.pk).unwrap();\n        let private_credential = voter.construct_private_credential_from_shares(\n            vec![cred_share_output_1, cred_share_output_2, cred_share_output_3], vec![share_1.S_i, share_2.S_i, bad_encryption]);\n\n        println!(\"private_credential {:?}\", private_credential);\n    }\n\n    #[test]\n    pub fn test_vote() {\n        let group_id = SupportedGroups::FFDHE4096;\n        let pp = ElGamalPP::generate_from_rfc7919(group_id);\n        let voter_number = 1;\n        let params = &SystemParameters::create_supervisor(&pp);\n        let pk =  ElGamalPublicKey {\n            pp: pp.clone(),\n            h: BigInt::from(4)\n        };\n        let mut voter = Voter::create(voter_number, &params, &pk);\n        let private_cred = encoding_quadratic_residue(BigInt::sample_below(&pp.p),&pp);\n        //let private_cred = encoding_quadratic_residue(BigInt::from(3),&pp);\n\n        voter.set_private_credential(private_cred);\n        let candidate_index = 1;\n        let vote = voter.vote(candidate_index, &params.clone());\n        assert!(Voter::check_votes(&voter, &vote, &params));\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/citivas/test_voter.rs b/src/citivas/test_voter.rs
--- a/src/citivas/test_voter.rs	
+++ b/src/citivas/test_voter.rs	
@@ -72,7 +72,7 @@
         let params = &SystemParameters::create_supervisor(&pp);
         let pk =  ElGamalPublicKey {
             pp: pp.clone(),
-            h: BigInt::from(4)
+            h: BigInt::sample_below(&pp.p)
         };
         let mut voter = Voter::create(voter_number, &params, &pk);
         let private_cred = encoding_quadratic_residue(BigInt::sample_below(&pp.p),&pp);
